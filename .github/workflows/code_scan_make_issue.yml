name: CodeQL Scan and Create Issues

on:
  schedule:
    - cron: "0 3 1 * *" # 毎月1日の午前3時に実行
  workflow_dispatch:

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      issues: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'typescript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Fetch code scanning alerts
        id: fetch_alerts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -s -H "Authorization: bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts?state=open&per_page=100" \
            > alerts.json
          
          COUNT=$(jq 'length' alerts.json)
          echo "Found $COUNT alerts"
          echo "count=$COUNT" >> $GITHUB_OUTPUT

      - name: Process alerts and create issues
        if: steps.fetch_alerts.outputs.count != '0'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          REPO_ID=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"query { repository(owner:\\\"$OWNER\\\", name:\\\"$REPO\\\") { id } }\"}" \
            https://api.github.com/graphql | jq -r '.data.repository.id')

          BOT_ID=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"query { repository(owner:\\\"$OWNER\\\", name:\\\"$REPO\\\") { suggestedActors(capabilities:[CAN_BE_ASSIGNED]) { nodes { login id } } } }\"}" \
            https://api.github.com/graphql | jq -r '.data.repository.suggestedActors.nodes[] | select(.login=="copilot-swe-agent") | .id')

          echo "Repository ID: $REPO_ID"
          echo "Copilot BOT_ID: $BOT_ID"

          jq -c '.[]' alerts.json | while read alert; do
            TITLE=$(echo "$alert" | jq -r '.rule.id + ": " + .rule.description')
            BODY=$(echo "$alert" | jq -r '.most_recent_instance.message.text')

            echo "Creating issue: $TITLE"

            ISSUE_ID=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"query\":\"mutation { createIssue(input:{repositoryId:\\\"$REPO_ID\\\", title:\\\"$TITLE\\\", body:\\\"$BODY\\\"}) { issue { id number } } }\"}" \
              https://api.github.com/graphql | jq -r '.data.createIssue.issue.id')

            echo "Assigning Copilot to issue $ISSUE_ID"

            curl -s -H "Authorization: bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"query\":\"mutation { replaceActorsForAssignable(input: {assignableId: \\\"$ISSUE_ID\\\", actorIds: [\\\"$BOT_ID\\\"]}) { assignable { ... on Issue { number assignees(first:5) { nodes { login } } } } } }\"}" \
              https://api.github.com/graphql
          done
