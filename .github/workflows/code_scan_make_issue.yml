name: CodeQL Scan and Create Issues

on:
  schedule:
    - cron: "0 3 1 * *" # 毎月1日の午前3時に実行
  workflow_dispatch:

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      issues: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'typescript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      # スキャンの実行時間が長いので、スキャンしない（本番ではスキャンするようにコメントアウトをはずす！）
      #- name: Perform CodeQL Analysis
      #  uses: github/codeql-action/analyze@v3

      - name: Create Issues from CodeQL Alerts and Assign Copilot
        uses: actions/github-script@v7
        with:
          script: |

            console.log("[CodeQL] アラート情報を取得中...");
            const { data: alerts } = await github.request(
              "GET /repos/${{ github.repository }}/code-scanning/alerts",
              { state: "open" }
            );
            console.log(`[CodeQL] アラート件数: ${alerts.length}`);

            // CopilotユーザーIDをGraphQLで取得
            const copilotId = "BOT_kgDOC9w8XQ";
            /* うまくいかないので一旦固定IDで対応
            const copilotUserQuery = `
              query { 
                repository(owner: \"ikeikejunjun\", name: \"CodeQLTypeScriptTest\") {
                  suggestedActors(capabilities: [CAN_BE_ASSIGNED], first: 100) { 
                    nodes { 
                      login __typename ... on Bot {
                        id 
                      } ... on User { 
                        id 
                      } 
                    } 
                  } 
                } 
              }
            `;

            console.log("[Copilot] ユーザーIDをGraphQLで取得中...");
            const copilotResult = await github.graphql(copilotUserQuery);
            const nodes = copilotResult.repository.suggestedActors.nodes;
            console.log(`[Copilot] suggestedActors: ${JSON.stringify(nodes, null, 2)}`);
            // loginがcopilot-swe-agentのidを取得
            const copilotNode = nodes.find(n => n.login === "copilot-swe-agent");
            const copilotId = copilotNode ? copilotNode.id : null;
            console.log(`[Copilot] copilotId: ${copilotId}`);
            if (!copilotId) {
              core.setFailed("Copilot user ID not found.");
              return;
            }
            */

            // 既存Issue一覧を取得

            console.log("[GitHub] 既存Issue一覧を取得中...");
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open"
            });
            console.log(`[GitHub] 既存Issue件数: ${issues.length}`);

            for (const alert of alerts) {
              const ruleId = alert.rule.id;
              const file = alert.most_recent_instance?.location?.path || "unknown file";
              const issueTitle = `CodeQL Alert: ${ruleId} in ${file}`;

              const exists = issues.some(issue => issue.title === issueTitle);
              if (exists) {
                console.log(`[SKIP] 既存Issueあり: ${issueTitle}`);
                continue;
              }

              const body = "**Rule**: " + ruleId + "\n**Severity**: " + alert.rule.severity + "\n**File**: " + file + "\n**URL**: " + alert.html_url + "\n\n**Details:**\n" + alert.rule.description + "\n\n@github-copilot please suggest a fix\ncc @ikeikejunjun";

              // Issue作成
              console.log(`[CREATE] Issue作成: ${issueTitle}`);
              const { data: newIssue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: body,
                assignees: ["ikeikejunjun"]
              });
              console.log(`[ASSIGN] Copilotをアサイン: issueId=${newIssue.node_id}`);

              // Copilotをアサイン（GraphQLでassigneeIdsに追加）
              const assignMutation = `
                mutation {
                  replaceActorsForAssignable(input: {assignableId: \"${newIssue.node_id}\", actorIds: [\"${copilotId}\"]}) {
                    assignable {
                      ... on Issue {
                        id
                        title
                        assignees(first: 10) {
                          nodes {
                            login
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const assignResult = await github.graphql(assignMutation);
              console.log(`[ASSIGNED] Copilotをアサイン完了: ${JSON.stringify(assignResult, null, 2)}`);
            }
