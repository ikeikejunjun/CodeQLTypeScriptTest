name: CodeQL Scan and Create Issues

on:
  schedule:
    - cron: "0 3 1 * *" # 毎月1日の午前3時に実行
  workflow_dispatch:

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      issues: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'typescript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      # スキャンの実行時間が長いので、スキャンしない（本番ではスキャンするようにコメントアウトをはずす！）
      #- name: Perform CodeQL Analysis
      #  uses: github/codeql-action/analyze@v3


      # --- Alerts を取得して Issue 作成 + Copilot 割当 ---
      - name: Create issues from CodeQL alerts and assign Copilot
        # NOTE: この step は GraphQL を使うため、GH CLI が使用するトークンをここで指定します。
        # 必ずリポジトリの Secrets に COPILOT_TOKEN を登録してください（user token / PAT）。
        env:
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          REPO_FULL: ${{ github.repository }}
          # このトークン should be a user token (PAT) with repo access — see docs.
          # https://docs.github.com/ja/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#fine-grained-personal-access-token-%E3%81%AE%E4%BD%9C%E6%88%90
          TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          set -eu

          api="https://api.github.com"

          # 1) Copilot Bot ID を取得 (GraphQL: suggestedActors)
          copilot_bot_id=$(curl -s -H "Authorization: bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -X POST $api/graphql \
            -d "{\"query\":\"query { repository(owner: \\\"$OWNER\\\", name: \\\"$REPO\\\") { suggestedActors(capabilities: [CAN_BE_ASSIGNED], first:100) { nodes { login __typename ... on Bot { id } ... on User { id } } } } }\"}" \
            | jq -r '.data.repository.suggestedActors.nodes[] | select(.login == "copilot-swe-agent") | .id')

          if [ -z "$copilot_bot_id" ]; then
            echo "Copilot bot ID not found. Will create issues but skip assignment."
          else
            echo "Copilot Bot ID: $copilot_bot_id"
          fi

          # 2) Code Scanning Alerts を取得
          alerts=$(curl -s -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "$api/repos/$FULL/code-scanning/alerts?state=open&per_page=100")

          count=$(echo "$alerts" | jq 'length')
          echo "Found $count alerts"
          if [ "$count" -eq 0 ]; then exit 0; fi

          # 3) 既存 open issues を取得
          issues=$(curl -s -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "$api/repos/$FULL/issues?state=open&per_page=100")

          # 4) 各アラートを処理
          echo "$alerts" | jq -c '.[]' | while read -r alert; do
            rule_id=$(echo "$alert" | jq -r '.rule.id // empty')
            msg=$(echo "$alert" | jq -r '.most_recent_instance.message.text // empty')
            url=$(echo "$alert" | jq -r '.html_url // empty')

            title="CodeQL Alert: ${rule_id:-unknown}"
            body="CodeQL Alert detected\n\n**Rule:** $rule_id\n\n**Message:** $msg\n\n[View Alert]($url)"

            # 既存 Issue に同じ URL が含まれているかチェック
            existing=$(echo "$issues" | jq -r --arg u "$url" '.[] | select(.body!=null and (.body|contains($u))) | .number' | head -n1)
            if [ -n "$existing" ]; then
              echo "Alert already tracked in Issue #$existing"
              continue
            fi

            # 5) 新しい Issue を作成
            issue=$(curl -s -H "Authorization: token $TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -X POST "$api/repos/$FULL/issues" \
              -d "{\"title\":\"$title\", \"body\":\"$body\"}")

            issue_number=$(echo "$issue" | jq -r '.number')
            echo "Created issue #$issue_number"

            # 6) GraphQL で Issue の global ID を取得
            issue_id=$(curl -s -H "Authorization: bearer $TOKEN" \
              -H "Content-Type: application/json" \
              -X POST $api/graphql \
              -d "{\"query\":\"query { repository(owner: \\\"$OWNER\\\", name: \\\"$REPO\\\") { issue(number: $issue_number) { id } } }\"}" \
              | jq -r '.data.repository.issue.id')

            # 7) Copilot を割り当て (replaceActorsForAssignable)
            if [ -n "$copilot_bot_id" ]; then
              echo "Assigning Copilot to issue #$issue_number"
              curl -s -H "Authorization: bearer $TOKEN" \
                -H "Content-Type: application/json" \
                -X POST $api/graphql \
                -d "{\"query\":\"mutation { replaceActorsForAssignable(input: { assignableId: \\\"$issue_id\\\", actorIds: [\\\"$copilot_bot_id\\\"] }) { assignable { ... on Issue { number assignees(first:5){nodes{login}} } } } }\"}" \
                | jq .
            fi
          done
