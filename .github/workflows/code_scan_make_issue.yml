name: CodeQL Scan and Create Issues

on:
  schedule:
    - cron: "0 3 1 * *" # 毎月1日の午前3時に実行
  workflow_dispatch:

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      issues: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'typescript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Create Issues for CodeQL Alerts
        id: create_issues
        run: |
          # Copilot AgentのIDをGraphQLで取得
          copilot_id=$(gh api graphql -f query='
            query {
              repository(owner: "${{ github.repository_owner }}", name: "${{ github.event.repository.name }}") {
                assignableUsers(query: "copilot") {
                  nodes {
                    id
                    login
                  }
                }
              }
            }' --jq '.data.repository.assignableUsers.nodes[0].id')

          echo "Copilot Agent ID: $copilot_id"

          # CodeQLのアラート一覧を取得
          alerts=$(gh api -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/code-scanning/alerts \
            --jq '.[] | select(.state=="open") | {rule: .rule.id, message: .most_recent_instance.message.text, url: .html_url}')

          if [ -z "$alerts" ]; then
            echo "No open alerts found."
            exit 0
          fi

          echo "$alerts" | jq -c '.' | while read -r alert; do
            title=$(echo "$alert" | jq -r '.rule')
            body=$(echo "$alert" | jq -r '.message')
            url=$(echo "$alert" | jq -r '.url')

            issue_body="CodeQL Alert detected:\n\n**Rule:** $title\n\n**Message:** $body\n\n[View Alert]($url)"

            # 既存Issueに同じURLが含まれていないか確認
            existing=$(gh issue list --state open --search "$url" --json number --jq '.[0].number')

            if [ -n "$existing" ] && [ "$existing" != "null" ]; then
              echo "Alert already tracked in Issue #$existing. Skipping."
              continue
            fi

            # Issueを作成
            issue=$(gh api -X POST repos/${{ github.repository }}/issues \
              -f title="CodeQL Alert: $title" \
              -f body="$issue_body")

            issue_number=$(echo "$issue" | jq -r '.number')
            issue_id=$(echo "$issue" | jq -r '.node_id')

            echo "Created issue #$issue_number"

            # Copilot Agentを割り当て
            gh api graphql -f query='
              mutation($issueId:ID!, $assigneeIds:[ID!]!) {
                addAssigneesToAssignable(input: { assignableId: $issueId, assigneeIds: $assigneeIds }) {
                  assignable { ... on Issue { number assignees(first:10) { nodes { login } } } }
                }
              }' -f issueId="$issue_id" -f assigneeIds="[$copilot_id]"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
